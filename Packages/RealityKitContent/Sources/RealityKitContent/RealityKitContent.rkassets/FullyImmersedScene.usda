#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["BackWall", "FrontWall", "Violin", "Material", "PipePart1", "PipePart1_1", "PipePart1_2", "PipePart1_3", "PipePart1_4", "PipePart1_5", "PipePart1_6", "PipePart1_7", "PipePart1_8", "PipePart1_9", "PipePart1_10", "PipePart1_11", "PipePart1_12", "duck", "Floor", "LeftWall", "RightWall"]
    def Cube "Floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Floor/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (50, 0.01, 50)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "LeftWall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 1.5707964)
        }
    )
    {
        rel material:binding = </Root/LeftWall/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        float3 xformOp:scale = (30, 0.01, 50)
        float3 xformOp:translate = (-5, 3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/LeftWall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "RightWall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 1.5707964)
        }
    )
    {
        reorder nameChildren = ["Natural_Cork", "DefaultMaterial"]
        rel material:binding = </Root/RightWall/Natural_Cork> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        float3 xformOp:scale = (29.999996, 0.009999998, 49.999992)
        float3 xformOp:translate = (5, 3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/RightWall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def "Natural_Cork" (
            active = true
            references = @NaturalCork.usdz@
        )
        {
            color3f inputs:Basecolor_Tint (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-56.812614, 67.17455)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2340
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2272
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (3.3746536, 0, -11.3004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Dot"
            {
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "Mix"
            {
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle"
            {
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Swizzle_1"
            {
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Multiply_1"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }
        }
    }

    def Cube "BackWall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (1.5707965, 0, 0)
        }
    )
    {
        rel material:binding = </Root/BackWall/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.7071067, 0.7071068, 0, 0)
        float3 xformOp:scale = (50, 0.009999995, 30)
        float3 xformOp:translate = (0, 3, 5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/BackWall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "FrontWall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (1.5707965, 0, 0)
        }
    )
    {
        rel material:binding = </Root/FrontWall/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.7071067, 0.7071068, 0, 0)
        float3 xformOp:scale = (49.99999, 0.009999993, 29.999994)
        float3 xformOp:translate = (0, 3, -5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/FrontWall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Violin" (
        active = true
        customData = {
            float3 rotationEulerHint = (4.821426e-8, -0.3839724, -0.20943862)
        }
        references = @Violin.usdz@
    )
    {
        quatf xformOp:orient = (0.97624975, -0.019944862, -0.18976372, -0.10260754)
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (4.2463536, 0.06022142, -3.9842012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "Material"
    {
        prepend token outputs:mtlx:surface.connect = </Root/Material/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (74.25, 99.5)
            float2 ui:nodegraph:node:size = (148.5, 199)
        }
    }

    def "PipePart1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @PipePart1.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-3.8670666, 1.6651953, -4.7992125)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1

            def RealityKitStruct "massFrame"
            {
                float m_mass = 100000

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Trigger"

            def RealityKitStruct "Shape"
            {
                float3 extent = (2.015211, 2.0000002, 4.1161203)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.007605374, 0, 1.0580602)
                }
            }
        }

        over "Geom"
        {
            over "Plane"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }

            over "Plane_001"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }
        }
    }

    def "duck" (
        active = true
        customData = {
            float3 rotationEulerHint = (3.1415927, 0, 0)
        }
        references = @duck1.usdz@
    )
    {
        quatf xformOp:orient = (-4.371139e-8, 1, 0, 0)
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (-4.398887, 1.6616278, -4.8073406)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            bool allowsDirectInput = 1
            bool allowsIndirectInput = 1
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (4.377198, 5.6825314, 4.617799)
                float radius = 2.2
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.43509972, -0.2354523, 0.24603367)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def "PipePart1_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @PipePart1.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-3.0475478, 1.6651953, -4.7991905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1

            def RealityKitStruct "massFrame"
            {
                float m_mass = 100000

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Trigger"

            def RealityKitStruct "Shape"
            {
                float3 extent = (2.015211, 2.0000002, 4.1161203)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.007605374, 0, 1.0580602)
                }
            }
        }

        over "Geom"
        {
            over "Plane"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }

            over "Plane_001"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }
        }

        over "Materials"
        {
            over "Material_001"
            {
                token outputs:surface.connect = </Root/PipePart1_1/Materials/Material_001/surfaceShader.outputs:surface>

                over "surfaceShader"
                {
                    color3f inputs:diffuseColor.connect = </Root/PipePart1_1/Materials/Material_001/diffuseColor_texture.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </Root/PipePart1_1/Materials/Material_001/emissiveColor_texture.outputs:rgb>
                }

                over "diffuseColor_texture"
                {
                    float2 inputs:st.connect = </Root/PipePart1_1/Materials/Material_001/texCoordReader.outputs:result>
                }

                over "emissiveColor_texture"
                {
                    float2 inputs:st.connect = </Root/PipePart1_1/Materials/Material_001/texCoordReader.outputs:result>
                }
            }

            over "defaultMaterial"
            {
                token outputs:surface.connect = </Root/PipePart1_1/Materials/defaultMaterial/Shader.outputs:surface>
            }
        }
    }

    def "rat" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 4.712389, 0)
        }
        prepend references = @rat.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
        float3 xformOp:scale = (0.1, 0.3, 0.1)
        float3 xformOp:translate = (-4.7686467, 1.9272571, -4.8633785)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "FIRSTCURVE" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 1.5707963, 0)
        }
        prepend references = @FIRSTCURVE.usdz@
    )
    {
        quatf xformOp:orient = (0.5, -0.50000006, 0.49999997, 0.5)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-2.1205144, 2.1820266, -4.8009887)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Geom"
        {
            over "Plane"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 2.4219463, 3.2093534)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                            float3 position = (0, 1.2109731, -0.6046767)
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }

            over "Plane_001"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0.6502272, 2.3873112)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                            float3 position = (0, 0.32215822, -0.19365561)
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }
        }
    }

    def "FIRSTCURVE_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (-3.1415927, 1.5707963, 0)
        }
        prepend references = @FIRSTCURVE.usdz@
    )
    {
        quatf xformOp:orient = (3.090862e-8, 0.70710677, 3.090862e-8, -0.70710677)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-2.6360548, 3.1234984, -4.8009887)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Geom"
        {
            over "Plane"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 2.4219463, 3.2093534)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                            float3 position = (0, 1.2109731, -0.6046767)
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }

            over "Plane_001"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0.6502272, 2.3873112)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                            float3 position = (0, 0.32215822, -0.19365561)
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }
        }

        over "Materials"
        {
            over "Material_001"
            {
                token outputs:surface.connect = </Root/FIRSTCURVE_1/Materials/Material_001/surfaceShader.outputs:surface>

                over "surfaceShader"
                {
                    color3f inputs:diffuseColor.connect = </Root/FIRSTCURVE_1/Materials/Material_001/diffuseColor_texture.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </Root/FIRSTCURVE_1/Materials/Material_001/emissiveColor_texture.outputs:rgb>
                }

                over "diffuseColor_texture"
                {
                    float2 inputs:st.connect = </Root/FIRSTCURVE_1/Materials/Material_001/texCoordReader.outputs:result>
                }

                over "emissiveColor_texture"
                {
                    float2 inputs:st.connect = </Root/FIRSTCURVE_1/Materials/Material_001/texCoordReader.outputs:result>
                }
            }

            over "defaultMaterial"
            {
                token outputs:surface.connect = </Root/FIRSTCURVE_1/Materials/defaultMaterial/Shader.outputs:surface>
            }
        }
    }

    def "PipePart1_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (3.1510973, 1.5707963, 0)
        }
        references = @PipePart1.usdz@
    )
    {
        quatf xformOp:orient = (-0.003360386, 0.7070987, -0.003360892, -0.7070988)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-3.4615073, 3.1157725, -4.799292)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1

            def RealityKitStruct "massFrame"
            {
                float m_mass = 100000

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Trigger"

            def RealityKitStruct "Shape"
            {
                float3 extent = (2.015211, 2.0000002, 4.1161203)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.007605374, 0, 1.0580602)
                }
            }
        }

        over "Geom"
        {
            over "Plane"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }

            over "Plane_001"
            {
                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Trigger"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (2, 0, 2)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "RigidBody"
                {
                    bool gravityEnabled = 0
                    uniform token info:id = "RealityKit.RigidBody"
                    bool lockRotationX = 1
                    bool lockRotationY = 1
                    bool lockRotationZ = 1
                    bool lockTranslationX = 1
                    bool lockTranslationY = 1
                    bool lockTranslationZ = 1

                    def RealityKitStruct "massFrame"
                    {
                        float m_mass = 1000000

                        def RealityKitStruct "m_pose"
                        {
                        }
                    }

                    def RealityKitStruct "material"
                    {
                    }
                }
            }
        }

        over "Materials"
        {
            over "Material_001"
            {
                token outputs:surface.connect = </Root/PipePart1_2/Materials/Material_001/surfaceShader.outputs:surface>

                over "surfaceShader"
                {
                    color3f inputs:diffuseColor.connect = </Root/PipePart1_2/Materials/Material_001/diffuseColor_texture.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </Root/PipePart1_2/Materials/Material_001/emissiveColor_texture.outputs:rgb>
                }

                over "diffuseColor_texture"
                {
                    float2 inputs:st.connect = </Root/PipePart1_2/Materials/Material_001/texCoordReader.outputs:result>
                }

                over "emissiveColor_texture"
                {
                    float2 inputs:st.connect = </Root/PipePart1_2/Materials/Material_001/texCoordReader.outputs:result>
                }
            }

            over "defaultMaterial"
            {
                token outputs:surface.connect = </Root/PipePart1_2/Materials/defaultMaterial/Shader.outputs:surface>
            }
        }
    }

    def "tv_retro" (
        active = true
        prepend references = @tv_retro.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.012450887, 0.012450887, 0.012450887)
        float3 xformOp:translate = (-4.4060316, 0.80800563, -4.764137)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (-4.2736526, 3.152582, -4.7184014)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }
}

